version: '3.8'

services:
  # Zookeeper for Kafka cluster coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: fractal-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - fractal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka broker for high-throughput message streaming
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: fractal-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: localhost
      # High-performance settings for HFT
      KAFKA_NUM_NETWORK_THREADS: 8
      KAFKA_NUM_IO_THREADS: 16
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_LOG_CLEANUP_POLICY: delete
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - fractal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka UI for monitoring and management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: fractal-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: fractal-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_JMXPORT: 9997
    networks:
      - fractal-network
    restart: unless-stopped

  # Spark Master for distributed processing
  spark-master:
    image: bitnami/spark:3.5
    hostname: spark-master
    container_name: fractal-spark-master
    ports:
      - "8081:8080"  # Spark Master UI
      - "7077:7077"  # Spark Master port
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_MASTER_OPTS=-Dspark.deploy.defaultCores=2 -Dspark.deploy.defaultMemory=2g
    volumes:
      - spark-master-data:/opt/bitnami/spark/data
      - ../spark-analysis:/opt/spark-apps
    networks:
      - fractal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Spark Worker 1
  spark-worker-1:
    image: bitnami/spark:3.5
    hostname: spark-worker-1
    container_name: fractal-spark-worker-1
    depends_on:
      spark-master:
        condition: service_healthy
    ports:
      - "8082:8081"  # Worker 1 UI
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=4g
      - SPARK_WORKER_CORES=4
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - spark-worker-1-data:/opt/bitnami/spark/data
      - ../spark-analysis:/opt/spark-apps
    networks:
      - fractal-network
    restart: unless-stopped

  # Spark Worker 2
  spark-worker-2:
    image: bitnami/spark:3.5
    hostname: spark-worker-2
    container_name: fractal-spark-worker-2
    depends_on:
      spark-master:
        condition: service_healthy
    ports:
      - "8083:8081"  # Worker 2 UI
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=4g
      - SPARK_WORKER_CORES=4
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - spark-worker-2-data:/opt/bitnami/spark/data
      - ../spark-analysis:/opt/spark-apps
    networks:
      - fractal-network
    restart: unless-stopped

  # Redis for ultra-low latency caching
  redis:
    image: redis:7.2-alpine
    hostname: redis
    container_name: fractal-redis
    ports:
      - "6379:6379"
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 0
      --databases 16
    volumes:
      - redis-data:/data
    networks:
      - fractal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    hostname: prometheus
    container_name: fractal-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - fractal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for visualization dashboards
  grafana:
    image: grafana/grafana:10.1.0
    hostname: grafana
    container_name: fractal-grafana
    depends_on:
      prometheus:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=fractal2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - fractal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # InfluxDB for time-series data storage
  influxdb:
    image: influxdb:2.7
    hostname: influxdb
    container_name: fractal-influxdb
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=fractal2024
      - DOCKER_INFLUXDB_INIT_ORG=fractal-trading
      - DOCKER_INFLUXDB_INIT_BUCKET=market-data
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=fractal-admin-token-2024
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2
    networks:
      - fractal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Market Data Producer
  market-producer:
    build:
      context: ../distributed
      dockerfile: Dockerfile.producer
    container_name: fractal-market-producer
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PRODUCER_RATE=5000  # 5000 ticks/sec
      - LOG_LEVEL=INFO
    volumes:
      - ../distributed:/app
    networks:
      - fractal-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1g
          cpus: '1.0'

  # Fractal Pattern Consumer
  pattern-consumer:
    build:
      context: ../kafka-streams
      dockerfile: Dockerfile.consumer
    container_name: fractal-pattern-consumer
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8001:8001"  # Metrics port
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=INFO
    volumes:
      - ../kafka-streams:/app
    networks:
      - fractal-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: '2.0'

  # HFT Trading Engine
  hft-engine:
    build:
      context: ../hft-simulator
      dockerfile: Dockerfile.hft
    container_name: fractal-hft-engine
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      pattern-consumer:
        condition: service_started
    ports:
      - "8002:8002"  # Metrics port
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - INITIAL_CAPITAL=1000000
      - LOG_LEVEL=INFO
    volumes:
      - ../hft-simulator:/app
    networks:
      - fractal-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 3g
          cpus: '2.0'

  # Spark Fractal Analysis Job
  spark-fractal-job:
    build:
      context: ../spark-analysis
      dockerfile: Dockerfile.spark
    container_name: fractal-spark-job
    depends_on:
      spark-master:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - SPARK_MASTER_URL=spark://spark-master:7077
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - APP_NAME=FractalAnalysisJob
    volumes:
      - ../spark-analysis:/app
      - spark-job-data:/opt/spark/work-dir
    networks:
      - fractal-network
    restart: "no"  # Run once
    deploy:
      resources:
        limits:
          memory: 4g
          cpus: '2.0'

  # Nginx reverse proxy for load balancing
  nginx:
    image: nginx:1.25-alpine
    container_name: fractal-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - kafka-ui
      - grafana
      - spark-master
    networks:
      - fractal-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Named volumes for persistent data
volumes:
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local
  kafka-data:
    driver: local
  spark-master-data:
    driver: local
  spark-worker-1-data:
    driver: local
  spark-worker-2-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  influxdb-data:
    driver: local
  influxdb-config:
    driver: local
  spark-job-data:
    driver: local

# Custom network for inter-service communication
networks:
  fractal-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16